'''
Задание 1
В словаре types хранятся типы багов. Его ключи — числа от 1 до 5, а значения — от 'Блокирующий'  до 'Тривиальный' соответственно.
types = {
    1: 'Блокирующий',
    2: 'Критический',
    3: 'Значительный',
    4: 'Незначительный',
    5: 'Тривиальный'
}
В словаре tickets хранятся тикеты (задачи), которые заведены на эти баги.
Ключи — числовое значение критичности от 1 до 5, а значения — список с тикетами, которые этим значениям критичности соответствуют.
Но некоторые тикеты добавлены несколько раз в разные списки.
tickets = {
    1: ['API_45', 'API_76', 'E2E_4'],
    2: ['UI_19', 'API_65', 'API_76', 'E2E_45'],
    3: ['E2E_45', 'API_45', 'E2E_2'],
    4: ['E2E_9', 'API_76'],
    5: ['E2E_2', 'API_61']
}
Составь итоговый словарь, где ключи — это значение критичности, например, 'Значительный', а значения — списки с уникальными тикетами.
Для этого напиши две функции:
одна удаляет дубли из списков с тикетами,
вторая связывает уровень критичности со списком уникальных тикетов.
Если тикет есть в одном списке, то он уже не может быть в списках на уровень ниже.
Вторая функция принимает на вход два параметра: словарь types с типами багов и словарь tickets со списком багов. Функция возвращает словарь, где уровень критичности связан со списком уникальных тикетов.
Итоговый словарь должен получиться таким:
tickets_by_type = {
    'Блокирующий': ['API_45', 'API_76', 'E2E_4'],
    'Критический': ['UI_19', 'API_65', 'E2E_45'],
    'Значительный': ['E2E_2'],
    'Незначительный': ['E2E_9'],
    'Тривиальный': ['API_61']
}
Вызывать функцию необязательно.
'''

types = {
    1: 'Блокирующий',
    2: 'Критический',
    3: 'Значительный',
    4: 'Незначительный',
    5: 'Тривиальный'
}

tickets = {
    1: ['API_45', 'API_76', 'E2E_4'],
    2: ['UI_19', 'API_65', 'API_76', 'E2E_45'],
    3: ['E2E_45', 'API_45', 'E2E_2'],
    4: ['E2E_9', 'API_76'],
    5: ['E2E_2', 'API_61']
}


def remove_duplicates(tickets):
    for key in tickets:
        tickets[key] = list(set(tickets[key]))
    return tickets


def tickets_type(types, tickets):
    tickets = remove_duplicates(tickets)
    list_type = {}

    for key, value in tickets.items():
        ticket_type = types[key]
        if ticket_type not in list_type:
            list_type[ticket_type] = value
        else:
            list_type[ticket_type] += [x for x in value if x not in list_type[ticket_type]]

    return list_type


tickets_by_type = tickets_type(types, tickets)

for key, value in tickets_by_type.items():
    print(f'{key}: {value}')


